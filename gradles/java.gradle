apply from: gradlesPath + "const.gradle"
apply from: gradlesPath + "utils.gradle"
apply from: gradlesPath + "maven.gradle"

apply plugin: 'java-library'

//JVM 版本号要求
sourceCompatibility = 1.8
targetCompatibility = 1.8

//java编译的时候缺省状态下会因为中文字符而失败
[compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileJava.dependsOn(processResources)

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile("junit:junit:${junitVersion}")
}

/** ******************************************************************************************/
//打包源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}
/** ******************************************************************************************/

//configurations {
//    all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
//    all*.exclude group: "ch.qos.logback"
//    all*.exclude group: "log4j"
//}

configurations.all {
    //不使用缓存，使用仓库中最新的包
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds' // 动态版本 x.x.+
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'//  变化版本 x.x.x
    resolutionStrategy {
        force "com.google.guava:guava:${guavaVersion}"
        force "io.netty:netty-all:${nettyVersion}"
    }

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.fasterxml.jackson.core') {
            details.useVersion "${jacksonVersion}"
        }
    }
}