/** ******************************************************************************************/
buildscript {
    apply from: rootProject.rootDir.getAbsolutePath() + "/gradles/const.gradle"
    repositories {
        mavenLocal()
        maven { url REPO_ALIYUN_GRADLE_PLUGIN }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootPluginVersion}")
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:${thriftPluginVersion}"
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:${gprcPluginVersion}"
    }
}
/** ******************************************************************************************/

allprojects {
    group rootProject.name
    version "1.0.0"

    repositories {
        mavenLocal()
        maven { url REPO_ALIYUN_PUBLIC }
        maven { url REPO_NEXUS_PUBLIC }
    }
}

subprojects {
    project.beforeEvaluate {
        //在解析setting.gradle之后，开始解析build.gradle之前
        println("### beforeEvaluate: " + project.name)
    }

    project.afterEvaluate {
        //在所有build.gradle解析完成后，开始执行task之前
        println("### afterEvaluate: " + project.name)
        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                def fullName = String.format("%s:%s:%s", requested.group, requested.name, requested.version)
                println("requested: " + fullName)

                if (requested.group == 'com.fasterxml.jackson.core') {
                    details.useVersion "${jacksonVersion}"
                    println("force version")
                }
                if (requested.group == 'io.netty') {
                    details.useVersion "${nettyVersion}"
                    println("force version")
                }
                if (requested.group == 'com.ecwid.consul') {
                    details.useVersion "${consulVersion}"
                    println("force version")
                }
                if (requested.group == 'com.google.guava' && requested.name == 'guava') {
                    details.useVersion "${guavaVersion}"
                    println("force version")
                }
            }
        }
    }

}
/** ******************************************************************************************/

